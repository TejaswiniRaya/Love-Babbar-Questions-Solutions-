Minimum number of jumps
Given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y â‰¤ x.
Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.


N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}




class Solution {
    int getMinDiff(int[] arr, int n, int k) {
        Arrays.sort(arr);
        int ans=arr[n-1]-arr[0];
        int small=arr[0]+k;
        int large=arr[n-1]-k;
        for(int i=0;i<n-1;i++){
            int min=Math.min(small,arr[i+1]-k);
            int max=Math.max(large,arr[i]+k);
            if(min>0){
            ans=Math.min(ans,max-min);
            }
        }
        return ans;
    }
}









